<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AAXStandardBatchJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class AAXStandardBatchJob extends RunBaseBatch implements BatchRetryable
{
    DialogField     dialogFieldCount;
    DialogField     dialogFieldThrowError;


    int64           workCount;
    NoYes           throwError;

    int64           loopCounter;

    #DEFINE.CurrentVersion(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    // Pack and unpack methods for serialization
    public container pack()
    {
        return [#CurrentVersion, workCount, throwError, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container   packedClass = _packedClass;
        int         version     = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, workCount, throwError, packedClass] = packedClass;
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    // Define dialog method for user input
    public Object dialog()
    {
        DialogRunbase dialog = super();
        
        dialogFieldCount = dialog.addField(extendedTypeStr(NumberOf), 'Task Count', 'Task Count');
        dialogFieldCount.value(workCount);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    // Method to get the user's input from the dialog
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            workCount = dialogFieldCount.value();
        }
        return ret;

    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    // Main execution logic for the batch job
    public void run()
    {
        AAXStandardBatchJobTable AAXStandardBatchJobTable;

        int64 maxId;

        try
        {
            
            info(strFmt("Running batch job with parameter: %1", workCount));
            Info(strfmt("ThrowError set to %1", throwError));
            
            if (workCount)
            {
                while select forupdate Id, Updated, RecId from AAXStandardBatchJobTable
                    where AAXStandardBatchJobTable.Updated == NoYes::No
                {

                    if(AAXStandardBatchJobTable)
                    {
                        ttsbegin;
                        AAXStandardBatchJobTable.Updated = NoYes::Yes;
                        AAXStandardBatchJobTable.update();
                        ttscommit;

                    }

                    if(throwError == NoYes::Yes)
                    {
                        if(new RandomGenerate().randomInt(0,1000) >= 999) // 1 in 1000 chance of error
                        {
                            warning(strFmt("simulating throwing an unrecoverable error to trigger a retry"));
                            throw Exception::UpdateConflictNotRecovered;
                        }
                    }
                }


            }
            
        }
        catch (Exception::Error)
        {
            error("An error occurred during the batch job execution.");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    // Description of the batch job
    public static ClassDescription description()
    {
        return "AAXStandardBatchJob";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    // Method to indicate if the batch job can go into a batch
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    // Static main method to start the batch job
    public static void main(Args args)
    {
        AAXStandardBatchJob batchJob = new AAXStandardBatchJob();
        if (batchJob.prompt())
        {
            batchJob.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super();

        if (workCount < 1)
        {
            ret = checkFailed("work Count must be positive");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static AAXStandardBatchJob construct()
    {
        return new AAXStandardBatchJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        workCount = 1000;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkCount</Name>
				<Source><![CDATA[
    public int64 parmWorkCount(int64 _workCount = workCount)
    {
        workCount = _workCount;
        return workCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThrowError</Name>
				<Source><![CDATA[
    public NoYes parmThrowError(NoYes _throwError = throwError)
    {
        throwError = _throwError;
        return throwError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeRetried</Name>
				<Source><![CDATA[
    // Method to determine if the task can be retried.
    public boolean canBeRetried()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBaseBatchInfo</Name>
				<Source><![CDATA[
    public container runBaseBatchInfo()
    {
        return ["AAXStandardBatchJob", #CurrentVersion];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>