<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AAXBatchBundleService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Service class for batch bundle batch job example.
/// This class implements the SysOperationServiceBase for batch processing and supports retryable batch operations.
/// </summary>
public class AAXBatchBundleService extends SysOperationServiceBase implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the batch bundle using the provided data contract.
    /// Logs information about the batch job and processes each work item in the batch.
    /// Throws an error randomly if the throwError flag is set in the data contract.
    /// </summary>
    /// <param name="_dataContract">Data contract containing the parameters for the batch bundle process.</param>
    public void process(AAXBatchBundleDataContract _dataContract)
    {
        ListEnumerator ListEnumerator;

        if(_dataContract.parmRecIds() == null)
        {
            _dataContract.parmRecIds(new List(Types::Int64));
        }

        ListEnumerator = _dataContract.parmRecIds().getEnumerator();

        info(strFmt("Running batch job with parameter: %1", _dataContract.parmWorkItemCount()));
        Info(strfmt("ThrowError set to %1", _dataContract.parmThrowError()));
        Info(strFmt("Bundle size set to %1", _dataContract.parmBundleSize()));

        while(ListEnumerator.moveNext())
        {
            AAXBatchBundleWorkItem::doProcessWorkItem(ListEnumerator.current());

            if(_dataContract.parmThrowError())
            {
                if(new RandomGenerate().randomInt(0,100) >= 99)
                {
                    throw Error("Encountered Error");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch job is retryable.
    /// </summary>
    /// <returns>True, indicating the batch job can be retried.</returns>
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>