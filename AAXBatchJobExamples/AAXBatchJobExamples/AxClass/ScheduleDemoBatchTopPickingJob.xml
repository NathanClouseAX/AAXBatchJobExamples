<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ScheduleDemoBatchTopPickingJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
// Job to schedule the batch
class ScheduleDemoBatchTopPickingJob extends ScheduleDemoJob
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "Dialog to create Top Picking Batch Job";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    // Dialog setup
    public Object dialog()
    {
        batchJobTasks = 4;

        DialogRunbase dialog = super();

        dialog.caption("Top Pick Batch Job Dialog");

        fieldBundleSize.visible(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    // Main method to start the dialog
    public static void main(Args _args)
    {
        ScheduleDemoBatchTopPickingJob dialog = new ScheduleDemoBatchTopPickingJob();
        if (dialog.prompt())
        {
            dialog.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        AAXBatchPerfTable                   AAXBatchPerfTable;
        System.Diagnostics.Stopwatch        stopWatch;

        BatchHeader                                 batchHeader;
        SysOperationServiceController               controller;
        AAXBatchTopPickJobWorkStagingTable          AAXBatchTopPickJobWorkStagingTable; 

        AAXBatchTopPickJobWorkItemTable::reInit(workItemCount);

        ttsbegin;

        stopWatch = new System.Diagnostics.Stopwatch();

        AAXBatchTopPickJobWorkStagingTable::reInit(); 

        batchHeader = BatchHeader::construct();

        batchHeader.parmCaption(strFmt("AAX: Top Picking Example - %1 work items, %2 batch tasks", workItemCount, batchJobTasks));

        stopWatch = new System.Diagnostics.Stopwatch();

        for (int i=1; i <= batchJobTasks; i++)
        {
            controller = AAXBatchTopPickingController::construct();
            batchHeader.addTask(controller);
        }

        batchHeader.save();

        ttscommit;

        stopWatch.Stop();

        ttsbegin;
        AAXBatchPerfTable.BatchJobName = funcName();
        AAXBatchPerfTable.Operation = AAXBatchOperation::Scheduling;
        AAXBatchPerfTable.Milliseconds = stopWatch.ElapsedMilliseconds;
        AAXBatchPerfTable.BatchHeaderRecId = batchHeader.parmBatchHeaderId();
        AAXBatchPerfTable.insert();
        ttscommit;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>